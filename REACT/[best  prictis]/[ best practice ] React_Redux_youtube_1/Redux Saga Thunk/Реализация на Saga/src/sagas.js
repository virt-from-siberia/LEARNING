//Для того что бы отследить событие мы должны импортировать функцию takeEvery
// Метод put делает иньекцию данных в redux
// Вспомогательный метод call этот метод позволяет принять в себя функциию которая ворвращяет промис и на ружу этот call возврашяет данные
import { takeEvery, put, call } from "redux-saga/effects";
import { LOAD_DATA, putData } from "./actions";

//Функция для совершения асинхронного запроса
function fetchData() {
    //Совершаем асинхронный запрос
    return fetch(
        "https://jsonplaceholder.typicode.com/todos/1"
    ).then((response) => response.json());
}

//Сдесь мы можем совершать какие то монипуляции
function* workerLoadDatae() {
    //Вызываем метод  call этот метод позволяет принять в себя функциию которая
    //Ворвращяет промис и на ружу этот call возврашяет данные
    //В аргументы кладем обьект функции не вызывая ее
    // На выходе присваеваем переменной data данные из асинхронной функции
    const data = yield call(fetchData);

    //Иньекция в redux, для этого в саге используется метод put
    //Передаем экшен криетор putData из actions
    //Передаем в качестве аргумента переменную data которую получаем из вспомогательной функциии call
    yield put(putData(data));
}

//Сага делится на вотчеры и воркеры
//Сдесь мы хотим отследить событие в данном случае loadData
export function* watchLoadData() {
    //Передаем в takeEvery назване функции которую будем отслеживать
    //Вторым аргументом мы должны передать функцию воркер ктоторая будет что то делать с данными
    yield takeEvery(LOAD_DATA, workerLoadDatae);
}
